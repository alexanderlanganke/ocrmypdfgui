app-id: com.github.alexanderlanganke.ocrmypdfgui
runtime: org.gnome.Platform
runtime-version: '46' # Using a recent, stable GNOME runtime
sdk: org.gnome.Sdk
command: ocrmypdfgui

finish-args:
  # Basic Wayland/X11 access
  - --socket=wayland
  - --socket=fallback-x11
  # IPC access
  - --share=ipc
  # Allow network access (e.g., for downloading language data if not fully bundled, or future updates)
  - --share=network
  # Access to dconf (for GTK settings)
  - --filesystem=xdg-run/dconf:ro
  # For source PDF (read-only), portals are preferred but this is a fallback/convenience.
  - --filesystem=xdg-documents:ro
  # Explicitly grant access to portals. While often implicit, this ensures necessary permissions.
  - --talk-name=org.freedesktop.portal.Desktop
  - --talk-name=org.freedesktop.portal.Documents
  - --talk-name=org.freedesktop.portal.FileChooser

modules:
  # Tesseract OCR and its dependencies (Leptonica, etc.)
  # This section will require significant detail: specific versions, build commands.
  # Placeholder for Leptonica (example - actual version and URL needed)
  - name: leptonica
    buildsystem: autotools # Or cmake, depending on Leptonica's build system
    # configure-opts:
    #   - --prefix=/app
    sources:
      - type: archive
        url: http://www.leptonica.org/source/leptonica-1.82.0.tar.gz # Replace with actual stable URL and hash
        sha256: 0eeea19080f23e4370e0752f4f290e1d7e0198159020f6af32038a78bb904f51 # Replace with actual hash

  # Placeholder for Tesseract OCR (example - actual version and URL needed)
  - name: tesseract
    buildsystem: autotools # Or cmake
    # configure-opts:
    #   - --prefix=/app
    #   - --with-leptonica # Ensure it finds the leptonica built above
    # builddir: true # If build needs to be in a subdirectory
    dependencies:
      - leptonica
    sources:
      - type: archive
        url: https://github.com/tesseract-ocr/tesseract/archive/refs/tags/5.3.0.tar.gz # Replace with actual stable URL and hash
        sha256: f88249340859707f455007509a59428f03898f897017f6300a91776678a151A0 # Replace with actual hash
    # Post-install script to link tessdata if needed, or handle language data
    # post-install:
    #   - ln -s /app/share/tessdata /app/share/tesseract-ocr/4.00/tessdata # Example

  # Tesseract language data (placeholder - specific data files or archives needed)
  # Option 1: Bundle common languages (e.g., eng, deu, fra, spa)
  - name: tesseract-data-common
    buildsystem: simple
    build-commands:
      - mkdir -p /app/share/tessdata
      # Download individual .traineddata files or an archive
      # Example for English:
      - wget -O /app/share/tessdata/eng.traineddata https://github.com/tesseract-ocr/tessdata_fast/raw/main/eng.traineddata
      # Add more languages as needed
      # Ensure sha256 checks for downloaded files if possible, or use 'extra-data' source type
    sources:
      # Placeholder if using extra-data or a script to download
      - type: script
        dest-filename: download-tessdata.sh
        commands:
          - echo "Ensure this script downloads and places tessdata correctly if not done above"

  # Python dependencies for ocrmypdfgui and ocrmypdf itself
  # This will be generated by flatpak-pip-generator
  - name: python3-ocrmypdfgui-deps
    buildsystem: simple
    build-commands:
      # Commands to install pip dependencies from a generated requirements file
      # - pip3 install --no-index --find-links="file://${PWD}" --prefix=${FLATPAK_DEST} -r requirements.txt
      - echo "Python dependencies will be installed here using a generated list."
    sources:
      # This will be a generated JSON file from flatpak-pip-generator
      # - type: file
      #   path: python3-ocrmypdfgui-deps.json

  # ocrmypdfgui application itself
  - name: ocrmypdfgui
    buildsystem: simple
    build-commands:
      # Install the application using pip from the local source
      # Assuming the project structure is:
      # ./ocrmypdfgui_project_root/
      #   ./gui/ocrmypdfgui.desktop
      #   ./gui/ocrmypdfgui.png
      #   ./flatpak/com.github.alexanderlanganke.ocrmypdfgui.yaml  (this manifest)
      #   ./flatpak/com.github.alexanderlanganke.ocrmypdfgui.metainfo.xml
      #   ./setup.py (or pyproject.toml for ocrmypdfgui)
      # The 'path: ../' copies 'ocrmypdfgui_project_root' into the build dir.
      # So, pip install . should work if setup.py/pyproject.toml is in 'ocrmypdfgui_project_root'
      - pip3 install --no-index --find-links="file://${PWD}" --prefix=${FLATPAK_DEST} .
      # Install desktop file, appstream metadata, icons
      # Paths for install are relative to the module's source root (which is project_root)
      - install -Dm644 gui/ocrmypdfgui.desktop /app/share/applications/com.github.alexanderlanganke.ocrmypdfgui.desktop
      - install -Dm644 gui/ocrmypdfgui.png /app/share/icons/hicolor/512x512/apps/com.github.alexanderlanganke.ocrmypdfgui.png
      # Assuming metainfo.xml is in the 'flatpak' subdirectory alongside the manifest.
      # The 'sources' for this module is 'path: ../', meaning the module root is the project root.
      # Therefore, the path to metainfo.xml relative to module root is 'flatpak/com.github.alexanderlanganke.ocrmypdfgui.metainfo.xml'
      - install -Dm644 flatpak/com.github.alexanderlanganke.ocrmypdfgui.metainfo.xml /app/share/metainfo/com.github.alexanderlanganke.ocrmypdfgui.metainfo.xml
    sources:
      - type: dir 
        path: ../ # Assumes manifest is in a subdir like 'flatpak' and source is one level up

cleanup:
  # General cleanup of things not needed at runtime
  - /include
  - /lib/pkgconfig
  - /man
  - /share/doc
  - /share/man
  - /share/gtk-doc
  - /share/vala
  # Python specific cleanup
  - /lib/python*/site-packages/pip
  - /lib/python*/site-packages/setuptools
  - /lib/python*/site-packages/wheel
  - "*.pyc"
  - "__pycache__"
